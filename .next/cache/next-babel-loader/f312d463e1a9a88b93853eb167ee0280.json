{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useContext } from 'react';\nimport AppContext from '../contexts/AppContext';\nimport { v4 as uuidv4 } from 'uuid';\nexport class Scene {\n  constructor({\n    display,\n    previewImage,\n    sceneObject,\n    editorInputs\n  }) {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"display\", void 0);\n\n    _defineProperty(this, \"previewImage\", void 0);\n\n    _defineProperty(this, \"sceneObject\", void 0);\n\n    _defineProperty(this, \"editorInputs\", void 0);\n\n    // this.id = nanoid(12);\n    this.id = uuidv4();\n    this.display = display;\n    this.previewImage = previewImage;\n    this.sceneObject = sceneObject;\n    this.editorInputs = editorInputs;\n  } // isActiveScene(sceneManager: SceneManager) {\n  // \tthis.id == sceneManager.activeScene;\n  // }\n\n\n}\n\nconst SceneManagerReducer = (state, action) => {\n  const appContext = useContext(AppContext);\n\n  switch (action.type.toUpperCase()) {\n    case 'ADD':\n      console.log('ADDING TO SCENES', action.payload);\n      return {\n        activeScene: state.activeScene,\n        scenes: [...state.scenes, action.payload]\n      };\n\n    case 'REMOVE':\n      console.log('REMOVING FROM SCENES', action.payload);\n      return {\n        activeScene: state.activeScene,\n        scenes: [...state.scenes].filter(scene => scene.id == (action.payload instanceof String ? action.payload : action.payload.id))\n      };\n\n    case 'CLEAR':\n      console.log('CLEARING SCENES', action.payload);\n      return {\n        activeScene: null,\n        scenes: []\n      };\n\n    case 'SET':\n      console.log('SETTING LIST', action.payload);\n      return [...action.payload];\n\n    default:\n      return [...state];\n  }\n};\n\nexport { SceneManagerReducer };","map":{"version":3,"sources":["/home/trevorb/Documents/VSCode Projects/statuscord/react/scenemanager-reducer.ts"],"names":["useContext","AppContext","v4","uuidv4","Scene","constructor","display","previewImage","sceneObject","editorInputs","id","SceneManagerReducer","state","action","appContext","type","toUpperCase","console","log","payload","activeScene","scenes","filter","scene","String"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAGA,OAAOC,UAAP,MAAuB,wBAAvB;AAEA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAaA,OAAO,MAAMC,KAAN,CAAY;AAUlBC,EAAAA,WAAW,CAAC;AACXC,IAAAA,OADW;AAEXC,IAAAA,YAFW;AAGXC,IAAAA,WAHW;AAIXC,IAAAA;AAJW,GAAD,EAKI;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACd;AACA,SAAKC,EAAL,GAAUP,MAAM,EAAhB;AACA,SAAKG,OAAL,GAAeA,OAAf;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,GAtBiB,CAwBlB;AACA;AACA;;;AA1BkB;;AAyCnB,MAAME,mBAAmB,GAAG,CAC3BC,KAD2B,EAE3BC,MAF2B,KAGvB;AACJ,QAAMC,UAAU,GAAGd,UAAU,CAACC,UAAD,CAA7B;;AAEA,UAAQY,MAAM,CAACE,IAAP,CAAYC,WAAZ,EAAR;AACC,SAAK,KAAL;AACCC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCL,MAAM,CAACM,OAAvC;AAEA,aAAO;AACNC,QAAAA,WAAW,EAAER,KAAK,CAACQ,WADb;AAENC,QAAAA,MAAM,EAAE,CAAC,GAAGT,KAAK,CAACS,MAAV,EAAkBR,MAAM,CAACM,OAAzB;AAFF,OAAP;;AAID,SAAK,QAAL;AACCF,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCL,MAAM,CAACM,OAA3C;AAEA,aAAO;AACNC,QAAAA,WAAW,EAAER,KAAK,CAACQ,WADb;AAENC,QAAAA,MAAM,EAAE,CAAC,GAAGT,KAAK,CAACS,MAAV,EAAkBC,MAAlB,CACNC,KAAD,IACCA,KAAK,CAACb,EAAN,KACCG,MAAM,CAACM,OAAP,YAA0BK,MAA1B,GACEX,MAAM,CAACM,OADT,GAEGN,MAAM,CAACM,OAAR,CAA0BT,EAH7B,CAFM;AAFF,OAAP;;AAUD,SAAK,OAAL;AACCO,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BL,MAAM,CAACM,OAAtC;AAEA,aAAO;AACNC,QAAAA,WAAW,EAAE,IADP;AAENC,QAAAA,MAAM,EAAE;AAFF,OAAP;;AAID,SAAK,KAAL;AACCJ,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BL,MAAM,CAACM,OAAnC;AACA,aAAO,CAAC,GAAGN,MAAM,CAACM,OAAX,CAAP;;AACD;AACC,aAAO,CAAC,GAAGP,KAAJ,CAAP;AAhCF;AAkCA,CAxCD;;AA2CA,SAASD,mBAAT","sourcesContent":["import { useContext } from 'react';\nimport ResourceDataInterface from '../../interfaces/ResourceDataInterface';\nimport { DOWNLOAD_LIST_LIMIT } from '../../utils/limits-util';\nimport AppContext from '../contexts/AppContext';\nimport { EditorInputType } from './editor-input';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface SceneProps {\n\t// id: string;\n\tdisplay: string;\n\tpreviewImage: String | Blob;\n\tsceneObject: JSX.Element | null;\n\teditorInputs: {\n\t\tkey: { internal: string; display: string };\n\t\ttype: EditorInputType;\n\t}[];\n}\n\nexport class Scene {\n\tid: string;\n\tdisplay: string;\n\tpreviewImage: String | Blob;\n\tsceneObject: JSX.Element | null;\n\teditorInputs: {\n\t\tkey: { internal: string; display: string };\n\t\ttype: EditorInputType;\n\t}[];\n\n\tconstructor({\n\t\tdisplay,\n\t\tpreviewImage,\n\t\tsceneObject,\n\t\teditorInputs,\n\t}: SceneProps) {\n\t\t// this.id = nanoid(12);\n\t\tthis.id = uuidv4();\n\t\tthis.display = display;\n\t\tthis.previewImage = previewImage;\n\t\tthis.sceneObject = sceneObject;\n\t\tthis.editorInputs = editorInputs;\n\t}\n\n\t// isActiveScene(sceneManager: SceneManager) {\n\t// \tthis.id == sceneManager.activeScene;\n\t// }\n}\n\ntype SceneManagerAction =\n\t| {\n\t\t\ttype: 'ADD';\n\t\t\tpayload: Scene;\n\t  }\n\t| { type: 'REMOVE'; payload: Scene | string }\n\t| { type: 'CLEAR'; payload: undefined }\n\t| { type: 'GET_ALL'; payload: undefined }\n\t| { type: 'GET_ACTIVE'; payload: undefined }\n\t| { type: 'SET'; payload: Scene }\n\t| { type: 'SET_ACTIVE'; payload: Scene | string };\n\nconst SceneManagerReducer = (\n\tstate: { activeScene: Scene | null; scenes: Scene[] },\n\taction: SceneManagerAction\n) => {\n\tconst appContext = useContext(AppContext);\n\n\tswitch (action.type.toUpperCase()) {\n\t\tcase 'ADD':\n\t\t\tconsole.log('ADDING TO SCENES', action.payload);\n\n\t\t\treturn {\n\t\t\t\tactiveScene: state.activeScene,\n\t\t\t\tscenes: [...state.scenes, action.payload],\n\t\t\t};\n\t\tcase 'REMOVE':\n\t\t\tconsole.log('REMOVING FROM SCENES', action.payload);\n\n\t\t\treturn {\n\t\t\t\tactiveScene: state.activeScene,\n\t\t\t\tscenes: [...state.scenes].filter(\n\t\t\t\t\t(scene) =>\n\t\t\t\t\t\tscene.id ==\n\t\t\t\t\t\t(action.payload instanceof String\n\t\t\t\t\t\t\t? action.payload\n\t\t\t\t\t\t\t: (action.payload as Scene).id)\n\t\t\t\t),\n\t\t\t};\n\t\tcase 'CLEAR':\n\t\t\tconsole.log('CLEARING SCENES', action.payload);\n\n\t\t\treturn {\n\t\t\t\tactiveScene: null,\n\t\t\t\tscenes: [],\n\t\t\t};\n\t\tcase 'SET':\n\t\t\tconsole.log('SETTING LIST', action.payload);\n\t\t\treturn [...action.payload];\n\t\tdefault:\n\t\t\treturn [...state];\n\t}\n};\n\nexport type { SceneManagerAction };\nexport { SceneManagerReducer };\n"]},"metadata":{},"sourceType":"module"}