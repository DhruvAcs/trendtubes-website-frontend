{"ast":null,"code":"import _toConsumableArray from \"/home/trevorb/Documents/VSCode Projects/statuscord/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/trevorb/Documents/VSCode Projects/statuscord/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"/home/trevorb/Documents/VSCode Projects/statuscord/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { v4 as uuidv4 } from 'uuid';\nexport var Scene = function Scene(_ref) {\n  var display = _ref.display,\n      previewImage = _ref.previewImage,\n      sceneObject = _ref.sceneObject,\n      editorInputs = _ref.editorInputs;\n\n  _classCallCheck(this, Scene);\n\n  _defineProperty(this, \"id\", void 0);\n\n  _defineProperty(this, \"display\", void 0);\n\n  _defineProperty(this, \"previewImage\", void 0);\n\n  _defineProperty(this, \"sceneObject\", void 0);\n\n  _defineProperty(this, \"editorInputs\", void 0);\n\n  // this.id = nanoid(12);\n  this.id = uuidv4();\n  this.display = display;\n  this.previewImage = previewImage;\n  this.sceneObject = sceneObject;\n  this.editorInputs = editorInputs;\n} // isActiveScene(sceneManager: SceneManager) {\n// \tthis.id == sceneManager.activeScene;\n// }\n;\n\nvar isSceneType = function isSceneType(obj) {\n  return obj.id && obj.display && obj.sceneObject;\n};\n\nvar SceneManagerReducer = function SceneManagerReducer(state, action) {\n  switch (action.type.toUpperCase()) {\n    case 'ADD':\n      console.log('ADDING TO SCENES', action.payload);\n      return {\n        activeScene: state.activeScene,\n        scenes: [].concat(_toConsumableArray(state.scenes), [action.payload])\n      };\n\n    case 'REMOVE':\n      console.log('REMOVING FROM SCENES', action.payload);\n      return {\n        activeScene: state.activeScene,\n        scenes: _toConsumableArray(state.scenes).filter(function (scene) {\n          return scene.id == (action.payload instanceof String ? action.payload : action.payload.id);\n        })\n      };\n\n    case 'CLEAR':\n      console.log('CLEARING SCENES', action.payload);\n      return {\n        activeScene: null,\n        scenes: []\n      };\n    // case 'GET':\n    // \tconsole.log('GETTING SCENE', action.payload);\n    // \treturn state.scenes.find((scene) => scene.id == action.payload);\n    // case 'GET_ALL':\n    // \tconsole.log('GETTING ALL SCENES', action.payload);\n    // \treturn state.scenes;\n    // case 'GET_ACTIVE':\n    // \tconsole.log('GETTING ACTIVE SCENE', action.payload);\n    // \treturn state.activeScene;\n\n    case 'SET':\n      console.log('SETTING SCENES', action.payload);\n      return {\n        activeScene: null,\n        scenes: action.payload\n      };\n\n    case 'SET_ACTIVE':\n      console.log('SETTING ACTIVE SCENE', action.payload);\n      return {\n        activeScene: state.scenes.find(function (scene) {\n          return scene.id == action.payload;\n        }),\n        scenes: state.scenes\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = SceneManagerReducer;\nexport { SceneManagerReducer, isSceneType };\n\nvar _c;\n\n$RefreshReg$(_c, \"SceneManagerReducer\");","map":{"version":3,"sources":["/home/trevorb/Documents/VSCode Projects/statuscord/react/scenemanager-reducer.ts"],"names":["v4","uuidv4","Scene","display","previewImage","sceneObject","editorInputs","id","isSceneType","obj","SceneManagerReducer","state","action","type","toUpperCase","console","log","payload","activeScene","scenes","filter","scene","String","find"],"mappings":";;;AACA,SAASA,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAaA,WAAaC,KAAb,GAUC,qBAKe;AAAA,MAJdC,OAIc,QAJdA,OAIc;AAAA,MAHdC,YAGc,QAHdA,YAGc;AAAA,MAFdC,WAEc,QAFdA,WAEc;AAAA,MADdC,YACc,QADdA,YACc;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACd;AACA,OAAKC,EAAL,GAAUN,MAAM,EAAhB;AACA,OAAKE,OAAL,GAAeA,OAAf;AACA,OAAKC,YAAL,GAAoBA,YAApB;AACA,OAAKC,WAAL,GAAmBA,WAAnB;AACA,OAAKC,YAAL,GAAoBA,YAApB;AACA,CAtBF,CAwBC;AACA;AACA;AA1BD;;AA6BA,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACC,GAAD,EAA4B;AAC/C,SAAOA,GAAG,CAACF,EAAJ,IAAUE,GAAG,CAACN,OAAd,IAAyBM,GAAG,CAACJ,WAApC;AACA,CAFD;;AAiBA,IAAMK,mBAAmB,GAAG,SAAtBA,mBAAsB,CAC3BC,KAD2B,EAE3BC,MAF2B,EAGvB;AACJ,UAAQA,MAAM,CAACC,IAAP,CAAYC,WAAZ,EAAR;AACC,SAAK,KAAL;AACCC,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCJ,MAAM,CAACK,OAAvC;AAEA,aAAO;AACNC,QAAAA,WAAW,EAAEP,KAAK,CAACO,WADb;AAENC,QAAAA,MAAM,+BAAMR,KAAK,CAACQ,MAAZ,IAAoBP,MAAM,CAACK,OAA3B;AAFA,OAAP;;AAID,SAAK,QAAL;AACCF,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCJ,MAAM,CAACK,OAA3C;AAEA,aAAO;AACNC,QAAAA,WAAW,EAAEP,KAAK,CAACO,WADb;AAENC,QAAAA,MAAM,EAAE,mBAAIR,KAAK,CAACQ,MAAV,EAAkBC,MAAlB,CACP,UAACC,KAAD;AAAA,iBACCA,KAAK,CAACd,EAAN,KACCK,MAAM,CAACK,OAAP,YAA0BK,MAA1B,GACEV,MAAM,CAACK,OADT,GAEGL,MAAM,CAACK,OAAR,CAA0BV,EAH7B,CADD;AAAA,SADO;AAFF,OAAP;;AAUD,SAAK,OAAL;AACCQ,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BJ,MAAM,CAACK,OAAtC;AAEA,aAAO;AACNC,QAAAA,WAAW,EAAE,IADP;AAENC,QAAAA,MAAM,EAAE;AAFF,OAAP;AAID;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA,SAAK,KAAL;AACCJ,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BJ,MAAM,CAACK,OAArC;AAEA,aAAO;AACNC,QAAAA,WAAW,EAAE,IADP;AAENC,QAAAA,MAAM,EAAEP,MAAM,CAACK;AAFT,OAAP;;AAKD,SAAK,YAAL;AACCF,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoCJ,MAAM,CAACK,OAA3C;AAEA,aAAO;AACNC,QAAAA,WAAW,EAAEP,KAAK,CAACQ,MAAN,CAAaI,IAAb,CAAkB,UAACF,KAAD;AAAA,iBAAWA,KAAK,CAACd,EAAN,IAAYK,MAAM,CAACK,OAA9B;AAAA,SAAlB,CADP;AAENE,QAAAA,MAAM,EAAER,KAAK,CAACQ;AAFR,OAAP;;AAID;AACC,aAAOR,KAAP;AAxDF;AA0DA,CA9DD;;KAAMD,mB;AAiEN,SAASA,mBAAT,EAA8BF,WAA9B","sourcesContent":["import { EditorInputType } from './editor-input';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface SceneProps {\n\t// id: string;\n\tdisplay: string;\n\tpreviewImage: String | Blob;\n\tsceneObject: JSX.Element | null;\n\teditorInputs: {\n\t\tkey: { internal: string; display: string };\n\t\ttype: EditorInputType;\n\t}[];\n}\n\nexport class Scene {\n\tid: string;\n\tdisplay: string;\n\tpreviewImage: String | Blob;\n\tsceneObject: JSX.Element | null;\n\teditorInputs: {\n\t\tkey: { internal: string; display: string };\n\t\ttype: EditorInputType;\n\t}[];\n\n\tconstructor({\n\t\tdisplay,\n\t\tpreviewImage,\n\t\tsceneObject,\n\t\teditorInputs,\n\t}: SceneProps) {\n\t\t// this.id = nanoid(12);\n\t\tthis.id = uuidv4();\n\t\tthis.display = display;\n\t\tthis.previewImage = previewImage;\n\t\tthis.sceneObject = sceneObject;\n\t\tthis.editorInputs = editorInputs;\n\t}\n\n\t// isActiveScene(sceneManager: SceneManager) {\n\t// \tthis.id == sceneManager.activeScene;\n\t// }\n}\n\nconst isSceneType = (obj: any): obj is Scene => {\n\treturn obj.id && obj.display && obj.sceneObject;\n};\n\ntype SceneManagerAction =\n\t| {\n\t\t\ttype: 'ADD';\n\t\t\tpayload: Scene;\n\t  }\n\t| { type: 'REMOVE'; payload: Scene | string }\n\t| { type: 'CLEAR'; payload: any }\n\t// | { type: 'GET'; payload: string }\n\t// | { type: 'GET_ALL'; payload: undefined }\n\t// | { type: 'GET_ACTIVE'; payload: undefined }\n\t| { type: 'SET'; payload: Scene }\n\t| { type: 'SET_ACTIVE'; payload: Scene | string };\n\nconst SceneManagerReducer = (\n\tstate: { activeScene: Scene | null; scenes: Scene[] },\n\taction: SceneManagerAction\n) => {\n\tswitch (action.type.toUpperCase()) {\n\t\tcase 'ADD':\n\t\t\tconsole.log('ADDING TO SCENES', action.payload);\n\n\t\t\treturn {\n\t\t\t\tactiveScene: state.activeScene,\n\t\t\t\tscenes: [...state.scenes, action.payload],\n\t\t\t};\n\t\tcase 'REMOVE':\n\t\t\tconsole.log('REMOVING FROM SCENES', action.payload);\n\n\t\t\treturn {\n\t\t\t\tactiveScene: state.activeScene,\n\t\t\t\tscenes: [...state.scenes].filter(\n\t\t\t\t\t(scene) =>\n\t\t\t\t\t\tscene.id ==\n\t\t\t\t\t\t(action.payload instanceof String\n\t\t\t\t\t\t\t? action.payload\n\t\t\t\t\t\t\t: (action.payload as Scene).id)\n\t\t\t\t),\n\t\t\t};\n\t\tcase 'CLEAR':\n\t\t\tconsole.log('CLEARING SCENES', action.payload);\n\n\t\t\treturn {\n\t\t\t\tactiveScene: null,\n\t\t\t\tscenes: [],\n\t\t\t};\n\t\t// case 'GET':\n\t\t// \tconsole.log('GETTING SCENE', action.payload);\n\n\t\t// \treturn state.scenes.find((scene) => scene.id == action.payload);\n\t\t// case 'GET_ALL':\n\t\t// \tconsole.log('GETTING ALL SCENES', action.payload);\n\n\t\t// \treturn state.scenes;\n\t\t// case 'GET_ACTIVE':\n\t\t// \tconsole.log('GETTING ACTIVE SCENE', action.payload);\n\n\t\t// \treturn state.activeScene;\n\t\tcase 'SET':\n\t\t\tconsole.log('SETTING SCENES', action.payload);\n\n\t\t\treturn {\n\t\t\t\tactiveScene: null,\n\t\t\t\tscenes: action.payload,\n\t\t\t};\n\n\t\tcase 'SET_ACTIVE':\n\t\t\tconsole.log('SETTING ACTIVE SCENE', action.payload);\n\n\t\t\treturn {\n\t\t\t\tactiveScene: state.scenes.find((scene) => scene.id == action.payload),\n\t\t\t\tscenes: state.scenes,\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport type { SceneManagerAction };\nexport { SceneManagerReducer, isSceneType };\n"]},"metadata":{},"sourceType":"module"}