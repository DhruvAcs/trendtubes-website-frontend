{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/trevorb/Documents/VSCode Projects/trendtubes/components/button.tsx\",\n    _this = this;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport tailwindConfig from '../tailwind.config';\n\nvar Button = function Button(_ref) {\n  var children = _ref.children,\n      className = _ref.className,\n      size = _ref.size,\n      style = _ref.style,\n      href = _ref.href,\n      onClick = _ref.onClick;\n  return /*#__PURE__*/_jsxDEV(\"a\", {\n    style: style,\n    className: \"button select-none whitespace-nowrap bg-primary-color \".concat((size || '') == 'small' ? 'py-2 px-4 text-base rounded-md' : (size || '') == 'xs' ? 'py-2 px-4 text-sm rounded-md' : (size || '') == 'xxs' ? 'py-2 px-3 text-xs rounded-md' : 'py-3 px-6 text-base rounded-md', \" w-fit text-primary-text font-bold flex items-center justify-center \").concat(className || ''),\n    href: href,\n    onClick: onClick,\n    children: children || 'No text'\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 3\n  }, _this);\n};\n\n_c = Button;\n\nvar OutlineButton = function OutlineButton(_ref2) {\n  var children = _ref2.children,\n      className = _ref2.className,\n      size = _ref2.size,\n      style = _ref2.style,\n      href = _ref2.href,\n      color = _ref2.color,\n      textColor = _ref2.textColor,\n      highlightTextColor = _ref2.highlightTextColor,\n      props = _objectWithoutProperties(_ref2, [\"children\", \"className\", \"size\", \"style\", \"href\", \"color\", \"textColor\", \"highlightTextColor\"]);\n\n  return /*#__PURE__*/_jsxDEV(\"a\", _objectSpread(_objectSpread({\n    className: \"button select-none whitespace-nowrap \".concat((size || '') == 'sm' || (size || '') == 'small' ? 'py-2 px-4 text-base rounded-md' : (size || '') == 'xs' ? 'py-2 px-4 text-sm rounded-md' : 'py-3 px-6 text-base rounded-md', \" w-fit font-bold rounded-md flex items-center justify-center hover:bg-\").concat(color ? Object.keys(tailwindConfig.theme.extend.colors).find(function (key) {\n      return tailwindConfig.theme.extend.colors[key] === color;\n    }) || 'primary-color' : 'primary-color', \"  hover:\").concat(highlightTextColor, \" \").concat(className || ''),\n    style: Object.assign({\n      boxShadow: \"inset 0px 0px 0px 2px \".concat(color || tailwindConfig.theme.extend.colors['primary-color']),\n      color: textColor || tailwindConfig.theme.extend.colors['primary-color']\n    }, style),\n    href: href\n  }, props), {}, {\n    children: children || 'No text'\n  }), void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 3\n  }, _this);\n};\n\n_c2 = OutlineButton;\nexport { Button, OutlineButton };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Button\");\n$RefreshReg$(_c2, \"OutlineButton\");","map":{"version":3,"sources":["/home/trevorb/Documents/VSCode Projects/trendtubes/components/button.tsx"],"names":["tailwindConfig","Button","children","className","size","style","href","onClick","OutlineButton","color","textColor","highlightTextColor","props","Object","keys","theme","extend","colors","find","key","assign","boxShadow"],"mappings":";;;;;;;;;;;AACA,OAAOA,cAAP,MAA2B,oBAA3B;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,OAcT;AAAA,MAbLC,QAaK,QAbLA,QAaK;AAAA,MAZLC,SAYK,QAZLA,SAYK;AAAA,MAXLC,IAWK,QAXLA,IAWK;AAAA,MAVLC,KAUK,QAVLA,KAUK;AAAA,MATLC,IASK,QATLA,IASK;AAAA,MARLC,OAQK,QARLA,OAQK;AACL,sBACC;AACC,IAAA,KAAK,EAAEF,KADR;AAEC,IAAA,SAAS,kEACR,CAACD,IAAI,IAAI,EAAT,KAAgB,OAAhB,GACG,gCADH,GAEG,CAACA,IAAI,IAAI,EAAT,KAAgB,IAAhB,GACA,8BADA,GAEA,CAACA,IAAI,IAAI,EAAT,KAAgB,KAAhB,GACA,8BADA,GAEA,gCAPK,iFASRD,SAAS,IAAI,EATL,CAFV;AAaC,IAAA,IAAI,EAAEG,IAbP;AAcC,IAAA,OAAO,EAAEC,OAdV;AAAA,cAgBEL,QAAQ,IAAI;AAhBd;AAAA;AAAA;AAAA;AAAA,WADD;AAoBA,CAnCD;;KAAMD,M;;AAsDN,IAAMO,aAAa,GAAG,SAAhBA,aAAgB,QAUI;AAAA,MATzBN,QASyB,SATzBA,QASyB;AAAA,MARzBC,SAQyB,SARzBA,SAQyB;AAAA,MAPzBC,IAOyB,SAPzBA,IAOyB;AAAA,MANzBC,KAMyB,SANzBA,KAMyB;AAAA,MALzBC,IAKyB,SALzBA,IAKyB;AAAA,MAJzBG,KAIyB,SAJzBA,KAIyB;AAAA,MAHzBC,SAGyB,SAHzBA,SAGyB;AAAA,MAFzBC,kBAEyB,SAFzBA,kBAEyB;AAAA,MADtBC,KACsB;;AACzB,sBACC;AACC,IAAA,SAAS,iDACR,CAACR,IAAI,IAAI,EAAT,KAAgB,IAAhB,IAAwB,CAACA,IAAI,IAAI,EAAT,KAAgB,OAAxC,GACG,gCADH,GAEG,CAACA,IAAI,IAAI,EAAT,KAAgB,IAAhB,GACA,8BADA,GAEA,gCALK,mFAORK,KAAK,GACFI,MAAM,CAACC,IAAP,CAAYd,cAAc,CAACe,KAAf,CAAqBC,MAArB,CAA4BC,MAAxC,EAAgDC,IAAhD,CACA,UAACC,GAAD;AAAA,aAASnB,cAAc,CAACe,KAAf,CAAqBC,MAArB,CAA4BC,MAA5B,CAAmCE,GAAnC,MAA4CV,KAArD;AAAA,KADA,KAEK,eAHH,GAIF,eAXK,qBAYEE,kBAZF,cAYwBR,SAAS,IAAI,EAZrC,CADV;AAcC,IAAA,KAAK,EAAEU,MAAM,CAACO,MAAP,CACN;AACCC,MAAAA,SAAS,kCACRZ,KAAK,IAAIT,cAAc,CAACe,KAAf,CAAqBC,MAArB,CAA4BC,MAA5B,CAAmC,eAAnC,CADD,CADV;AAICR,MAAAA,KAAK,EACJC,SAAS,IAAIV,cAAc,CAACe,KAAf,CAAqBC,MAArB,CAA4BC,MAA5B,CAAmC,eAAnC;AALf,KADM,EAQNZ,KARM,CAdR;AAwBC,IAAA,IAAI,EAAEC;AAxBP,KAyBKM,KAzBL;AAAA,cA2BEV,QAAQ,IAAI;AA3Bd;AAAA;AAAA;AAAA;AAAA,WADD;AA+BA,CA1CD;;MAAMM,a;AA4CN,SAASP,MAAT,EAAiBO,aAAjB","sourcesContent":["import { ReactNode } from 'react';\nimport tailwindConfig from '../tailwind.config';\n\nconst Button = ({\n\tchildren,\n\tclassName,\n\tsize,\n\tstyle,\n\thref,\n\tonClick,\n}: {\n\tchildren?: ReactNode;\n\tclassName?: string;\n\tsize?: string;\n\tstyle?: React.CSSProperties;\n\thref?: string;\n\tonClick?: (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => void;\n}) => {\n\treturn (\n\t\t<a\n\t\t\tstyle={style}\n\t\t\tclassName={`button select-none whitespace-nowrap bg-primary-color ${\n\t\t\t\t(size || '') == 'small'\n\t\t\t\t\t? 'py-2 px-4 text-base rounded-md'\n\t\t\t\t\t: (size || '') == 'xs'\n\t\t\t\t\t? 'py-2 px-4 text-sm rounded-md'\n\t\t\t\t\t: (size || '') == 'xxs'\n\t\t\t\t\t? 'py-2 px-3 text-xs rounded-md'\n\t\t\t\t\t: 'py-3 px-6 text-base rounded-md'\n\t\t\t} w-fit text-primary-text font-bold flex items-center justify-center ${\n\t\t\t\tclassName || ''\n\t\t\t}`}\n\t\t\thref={href}\n\t\t\tonClick={onClick}\n\t\t>\n\t\t\t{children || 'No text'}\n\t\t</a>\n\t);\n};\n\ninterface OutlineButtonProps\n\t// extends React.InputHTMLAttributes<HTMLAnchorElement> {\n\textends React.DetailedHTMLProps<\n\t\tReact.AnchorHTMLAttributes<any>,\n\t\tHTMLAnchorElement\n\t> {\n\tchildren?: ReactNode;\n\tclassName?: string;\n\t// style: any;\n\tsize?: string;\n\tstyle?: React.CSSProperties;\n\thref?: string;\n\tcolor?: string;\n\ttextColor?: string;\n\thighlightTextColor?: string;\n}\n\nconst OutlineButton = ({\n\tchildren,\n\tclassName,\n\tsize,\n\tstyle,\n\thref,\n\tcolor,\n\ttextColor,\n\thighlightTextColor,\n\t...props\n}: OutlineButtonProps) => {\n\treturn (\n\t\t<a\n\t\t\tclassName={`button select-none whitespace-nowrap ${\n\t\t\t\t(size || '') == 'sm' || (size || '') == 'small'\n\t\t\t\t\t? 'py-2 px-4 text-base rounded-md'\n\t\t\t\t\t: (size || '') == 'xs'\n\t\t\t\t\t? 'py-2 px-4 text-sm rounded-md'\n\t\t\t\t\t: 'py-3 px-6 text-base rounded-md'\n\t\t\t} w-fit font-bold rounded-md flex items-center justify-center hover:bg-${\n\t\t\t\tcolor\n\t\t\t\t\t? Object.keys(tailwindConfig.theme.extend.colors).find(\n\t\t\t\t\t\t\t(key) => tailwindConfig.theme.extend.colors[key] === color\n\t\t\t\t\t  ) || 'primary-color'\n\t\t\t\t\t: 'primary-color'\n\t\t\t}  hover:${highlightTextColor} ${className || ''}`}\n\t\t\tstyle={Object.assign(\n\t\t\t\t{\n\t\t\t\t\tboxShadow: `inset 0px 0px 0px 2px ${\n\t\t\t\t\t\tcolor || tailwindConfig.theme.extend.colors['primary-color']\n\t\t\t\t\t}`,\n\t\t\t\t\tcolor:\n\t\t\t\t\t\ttextColor || tailwindConfig.theme.extend.colors['primary-color'],\n\t\t\t\t},\n\t\t\t\tstyle\n\t\t\t)}\n\t\t\thref={href}\n\t\t\t{...props}\n\t\t>\n\t\t\t{children || 'No text'}\n\t\t</a>\n\t);\n};\n\nexport { Button, OutlineButton };\n"]},"metadata":{},"sourceType":"module"}