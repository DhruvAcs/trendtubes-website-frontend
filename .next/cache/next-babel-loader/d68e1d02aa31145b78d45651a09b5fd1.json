{"ast":null,"code":"import _toConsumableArray from \"/home/trevorb/Documents/VSCode Projects/statuscord/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/home/trevorb/Documents/VSCode Projects/statuscord/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _defineProperty from \"/home/trevorb/Documents/VSCode Projects/statuscord/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nvar _s = $RefreshSig$();\n\nimport { useContext } from 'react';\nimport { DOWNLOAD_LIST_LIMIT } from '../../utils/limits-util';\nimport AppContext from '../contexts/AppContext';\nimport { v4 as uuidv4 } from 'uuid';\nexport var Scene = function Scene(_ref) {\n  var display = _ref.display,\n      previewImage = _ref.previewImage,\n      sceneObject = _ref.sceneObject,\n      editorInputs = _ref.editorInputs;\n\n  _classCallCheck(this, Scene);\n\n  _defineProperty(this, \"id\", void 0);\n\n  _defineProperty(this, \"display\", void 0);\n\n  _defineProperty(this, \"previewImage\", void 0);\n\n  _defineProperty(this, \"sceneObject\", void 0);\n\n  _defineProperty(this, \"editorInputs\", void 0);\n\n  // this.id = nanoid(12);\n  this.id = uuidv4();\n  this.display = display;\n  this.previewImage = previewImage;\n  this.sceneObject = sceneObject;\n  this.editorInputs = editorInputs;\n} // isActiveScene(sceneManager: SceneManager) {\n// \tthis.id == sceneManager.activeScene;\n// }\n;\n\nvar SceneManagerReducer = function SceneManagerReducer(state, action) {\n  _s();\n\n  var appContext = useContext(AppContext);\n\n  switch (action.type.toUpperCase()) {\n    case 'ADD':\n      if (state.length >= DOWNLOAD_LIST_LIMIT) {\n        console.log('app context', appContext);\n        return [].concat(_toConsumableArray(state.scenes), [action.payload]);\n      }\n\n      console.log('ADDING TO LIST', action.payload);\n      return [].concat(_toConsumableArray(state), [action.payload]);\n\n    case 'REMOVE':\n      console.log('REMOVING FROM LIST', action.payload);\n      return _toConsumableArray(state).filter(function (listItem) {\n        return listItem.id != action.payload.id;\n      });\n\n    case 'CLEAR':\n      console.log('CLEARING LIST', action.payload);\n      return [];\n\n    case 'SET':\n      console.log('SETTING LIST', action.payload);\n      return _toConsumableArray(action.payload);\n\n    default:\n      return _toConsumableArray(state);\n  }\n};\n\n_s(SceneManagerReducer, \"HGTTxa8uH4YBXqL2qR+kdbnGM4U=\");\n\n_c = SceneManagerReducer;\nexport { SceneManagerReducer };\n\nvar _c;\n\n$RefreshReg$(_c, \"SceneManagerReducer\");","map":{"version":3,"sources":["/home/trevorb/Documents/VSCode Projects/statuscord/react/scenemanager-reducer.ts"],"names":["useContext","DOWNLOAD_LIST_LIMIT","AppContext","v4","uuidv4","Scene","display","previewImage","sceneObject","editorInputs","id","SceneManagerReducer","state","action","appContext","type","toUpperCase","length","console","log","scenes","payload","filter","listItem"],"mappings":";;;;;;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,SAASC,mBAAT,QAAoC,yBAApC;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AAEA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAaA,WAAaC,KAAb,GAUC,qBAKe;AAAA,MAJdC,OAIc,QAJdA,OAIc;AAAA,MAHdC,YAGc,QAHdA,YAGc;AAAA,MAFdC,WAEc,QAFdA,WAEc;AAAA,MADdC,YACc,QADdA,YACc;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACd;AACA,OAAKC,EAAL,GAAUN,MAAM,EAAhB;AACA,OAAKE,OAAL,GAAeA,OAAf;AACA,OAAKC,YAAL,GAAoBA,YAApB;AACA,OAAKC,WAAL,GAAmBA,WAAnB;AACA,OAAKC,YAAL,GAAoBA,YAApB;AACA,CAtBF,CAwBC;AACA;AACA;AA1BD;;AAyCA,IAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,CAC3BC,KAD2B,EAE3BC,MAF2B,EAGvB;AAAA;;AACJ,MAAMC,UAAU,GAAGd,UAAU,CAACE,UAAD,CAA7B;;AAEA,UAAQW,MAAM,CAACE,IAAP,CAAYC,WAAZ,EAAR;AACC,SAAK,KAAL;AACC,UAAIJ,KAAK,CAACK,MAAN,IAAgBhB,mBAApB,EAAyC;AACxCiB,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BL,UAA3B;AAEA,4CAAWF,KAAK,CAACQ,MAAjB,IAAyBP,MAAM,CAACQ,OAAhC;AACA;;AAEDH,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BN,MAAM,CAACQ,OAArC;AAEA,0CAAWT,KAAX,IAAkBC,MAAM,CAACQ,OAAzB;;AACD,SAAK,QAAL;AACCH,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCN,MAAM,CAACQ,OAAzC;AAEA,aAAO,mBAAIT,KAAJ,EAAWU,MAAX,CAAkB,UAACC,QAAD;AAAA,eAAcA,QAAQ,CAACb,EAAT,IAAeG,MAAM,CAACQ,OAAP,CAAeX,EAA5C;AAAA,OAAlB,CAAP;;AACD,SAAK,OAAL;AACCQ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BN,MAAM,CAACQ,OAApC;AAEA,aAAO,EAAP;;AACD,SAAK,KAAL;AACCH,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BN,MAAM,CAACQ,OAAnC;AACA,gCAAWR,MAAM,CAACQ,OAAlB;;AACD;AACC,gCAAWT,KAAX;AAvBF;AAyBA,CA/BD;;GAAMD,mB;;KAAAA,mB;AAkCN,SAASA,mBAAT","sourcesContent":["import { useContext } from 'react';\nimport ResourceDataInterface from '../../interfaces/ResourceDataInterface';\nimport { DOWNLOAD_LIST_LIMIT } from '../../utils/limits-util';\nimport AppContext from '../contexts/AppContext';\nimport { EditorInputType } from './editor-input';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface SceneProps {\n\t// id: string;\n\tdisplay: string;\n\tpreviewImage: String | Blob;\n\tsceneObject: JSX.Element | null;\n\teditorInputs: {\n\t\tkey: { internal: string; display: string };\n\t\ttype: EditorInputType;\n\t}[];\n}\n\nexport class Scene {\n\tid: string;\n\tdisplay: string;\n\tpreviewImage: String | Blob;\n\tsceneObject: JSX.Element | null;\n\teditorInputs: {\n\t\tkey: { internal: string; display: string };\n\t\ttype: EditorInputType;\n\t}[];\n\n\tconstructor({\n\t\tdisplay,\n\t\tpreviewImage,\n\t\tsceneObject,\n\t\teditorInputs,\n\t}: SceneProps) {\n\t\t// this.id = nanoid(12);\n\t\tthis.id = uuidv4();\n\t\tthis.display = display;\n\t\tthis.previewImage = previewImage;\n\t\tthis.sceneObject = sceneObject;\n\t\tthis.editorInputs = editorInputs;\n\t}\n\n\t// isActiveScene(sceneManager: SceneManager) {\n\t// \tthis.id == sceneManager.activeScene;\n\t// }\n}\n\ntype SceneManagerAction =\n\t| {\n\t\t\ttype: 'ADD';\n\t\t\tpayload: Scene;\n\t  }\n\t| { type: 'REMOVE'; payload: Scene | string }\n\t| { type: 'CLEAR'; payload: undefined }\n\t| { type: 'GET_ALL'; payload: undefined }\n\t| { type: 'GET_ACTIVE'; payload: undefined }\n\t| { type: 'SET'; payload: Scene }\n\t| { type: 'SET_ACTIVE'; payload: Scene | string };\n\nconst SceneManagerReducer = (\n\tstate: { activeScene: Scene; scenes: Scene[] },\n\taction: SceneManagerAction\n) => {\n\tconst appContext = useContext(AppContext);\n\n\tswitch (action.type.toUpperCase()) {\n\t\tcase 'ADD':\n\t\t\tif (state.length >= DOWNLOAD_LIST_LIMIT) {\n\t\t\t\tconsole.log('app context', appContext);\n\n\t\t\t\treturn [...state.scenes, action.payload];\n\t\t\t}\n\n\t\t\tconsole.log('ADDING TO LIST', action.payload);\n\n\t\t\treturn [...state, action.payload];\n\t\tcase 'REMOVE':\n\t\t\tconsole.log('REMOVING FROM LIST', action.payload);\n\n\t\t\treturn [...state].filter((listItem) => listItem.id != action.payload.id);\n\t\tcase 'CLEAR':\n\t\t\tconsole.log('CLEARING LIST', action.payload);\n\n\t\t\treturn [];\n\t\tcase 'SET':\n\t\t\tconsole.log('SETTING LIST', action.payload);\n\t\t\treturn [...action.payload];\n\t\tdefault:\n\t\t\treturn [...state];\n\t}\n};\n\nexport type { SceneManagerAction };\nexport { SceneManagerReducer };\n"]},"metadata":{},"sourceType":"module"}