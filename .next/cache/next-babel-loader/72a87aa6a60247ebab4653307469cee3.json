{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { createContext } from 'react'; // import { FilteredResultsAction } from '../reducers/FilteredResultsReducer';\n\nimport { v4 as uuidv4 } from 'uuid';\n\nclass Scene {\n  constructor({\n    display,\n    previewImage,\n    sceneObject\n  }) {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"display\", void 0);\n\n    _defineProperty(this, \"previewImage\", void 0);\n\n    _defineProperty(this, \"sceneObject\", void 0);\n\n    _defineProperty(this, \"editorInputs\", void 0);\n\n    // this.id = nanoid(12);\n    this.id = uuidv4();\n    this.display = display;\n    this.previewImage = previewImage;\n    this.sceneObject = sceneObject;\n  }\n\n}\n\nclass SceneManager {\n  constructor({\n    scenes\n  }) {\n    _defineProperty(this, \"scenes\", void 0);\n\n    _defineProperty(this, \"activeScene\", void 0);\n\n    this.scenes = scenes || [];\n    this.activeScene = scenes && scenes[0].id || null;\n  }\n\n  getActiveScene() {\n    console.log('active scene find', this.activeScene, this.scenes, this.scenes.find(scene => scene.id == this.activeScene));\n    return this.activeScene ? this.scenes.find(scene => scene.id == this.activeScene) || null : null;\n  }\n\n  setActiveScene(id) {\n    console.log('set active scene', this.activeScene, id);\n    this.activeScene = id;\n    console.log('set active scene', this.activeScene, id);\n  }\n\n  getScenes() {\n    return this.scenes;\n  }\n\n  addScene(scene) {\n    this.scenes.push(scene);\n  }\n\n}\n\nconst contextProps = {\n  productName: '',\n  previewStatus: null,\n  setPreviewStatus: null,\n  sceneManager: new SceneManager({\n    scenes: null\n  })\n};\nconst EditorContext = /*#__PURE__*/createContext(contextProps);\nexport default EditorContext;\nexport { Scene, SceneManager };","map":{"version":3,"sources":["/home/trevorb/Documents/VSCode Projects/statuscord/react/editor-context.ts"],"names":["createContext","v4","uuidv4","Scene","constructor","display","previewImage","sceneObject","id","SceneManager","scenes","activeScene","getActiveScene","console","log","find","scene","setActiveScene","getScenes","addScene","push","contextProps","productName","previewStatus","setPreviewStatus","sceneManager","EditorContext"],"mappings":";;AAEA,SAASA,aAAT,QAA8B,OAA9B,C,CACA;;AAMA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;AASA,MAAMC,KAAN,CAAY;AAUXC,EAAAA,WAAW,CAAC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,YAAX;AAAyBC,IAAAA;AAAzB,GAAD,EAAqD;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAC/D;AACA,SAAKC,EAAL,GAAUN,MAAM,EAAhB;AACA,SAAKG,OAAL,GAAeA,OAAf;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA;;AAhBU;;AAmBZ,MAAME,YAAN,CAAmB;AAIlBL,EAAAA,WAAW,CAAC;AAAEM,IAAAA;AAAF,GAAD,EAAyC;AAAA;;AAAA;;AACnD,SAAKA,MAAL,GAAcA,MAAM,IAAI,EAAxB;AACA,SAAKC,WAAL,GAAoBD,MAAM,IAAIA,MAAM,CAAC,CAAD,CAAN,CAAUF,EAArB,IAA4B,IAA/C;AACA;;AAEDI,EAAAA,cAAc,GAAiB;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CACC,mBADD,EAEC,KAAKH,WAFN,EAGC,KAAKD,MAHN,EAIC,KAAKA,MAAL,CAAYK,IAAZ,CAAkBC,KAAD,IAAWA,KAAK,CAACR,EAAN,IAAY,KAAKG,WAA7C,CAJD;AAMA,WAAO,KAAKA,WAAL,GACJ,KAAKD,MAAL,CAAYK,IAAZ,CAAkBC,KAAD,IAAWA,KAAK,CAACR,EAAN,IAAY,KAAKG,WAA7C,KAA6D,IADzD,GAEJ,IAFH;AAGA;;AAEDM,EAAAA,cAAc,CAACT,EAAD,EAAa;AAC1BK,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC,KAAKH,WAArC,EAAkDH,EAAlD;AACA,SAAKG,WAAL,GAAmBH,EAAnB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgC,KAAKH,WAArC,EAAkDH,EAAlD;AACA;;AAEDU,EAAAA,SAAS,GAAG;AACX,WAAO,KAAKR,MAAZ;AACA;;AAEDS,EAAAA,QAAQ,CAACH,KAAD,EAAe;AACtB,SAAKN,MAAL,CAAYU,IAAZ,CAAiBJ,KAAjB;AACA;;AAjCiB;;AA2CnB,MAAMK,YAAsB,GAAG;AAC9BC,EAAAA,WAAW,EAAE,EADiB;AAE9BC,EAAAA,aAAa,EAAE,IAFe;AAG9BC,EAAAA,gBAAgB,EAAG,IAHW;AAM9BC,EAAAA,YAAY,EAAE,IAAIhB,YAAJ,CAAiB;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAAjB;AANgB,CAA/B;AASA,MAAMgB,aAAa,gBAAG1B,aAAa,CAAWqB,YAAX,CAAnC;AAEA,eAAeK,aAAf;AACA,SAASvB,KAAT,EAAgBM,YAAhB","sourcesContent":["import { SetStateAction } from 'react';\nimport { Dispatch } from 'react';\nimport { createContext } from 'react';\n// import { FilteredResultsAction } from '../reducers/FilteredResultsReducer';\nimport DiscordStatus from './discord-status';\nimport { EditorInputType } from './editor-input';\n// import { CartItem, CartItems, CartReducer } from \"../reducers/CartReducer\";\nimport { nanoid } from 'nanoid';\nimport { stringify } from 'querystring';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface SceneProps {\n\t// id: string;\n\tdisplay: string;\n\tpreviewImage: String | Blob;\n\tsceneObject: JSX.Element | null;\n}\n\nclass Scene {\n\tid: string;\n\tdisplay: string;\n\tpreviewImage: String | Blob;\n\tsceneObject: JSX.Element | null;\n\teditorInputs: {\n\t\tkey: { internal: string; display: string };\n\t\ttype: EditorInputType;\n\t}[];\n\n\tconstructor({ display, previewImage, sceneObject }: SceneProps) {\n\t\t// this.id = nanoid(12);\n\t\tthis.id = uuidv4();\n\t\tthis.display = display;\n\t\tthis.previewImage = previewImage;\n\t\tthis.sceneObject = sceneObject;\n\t}\n}\n\nclass SceneManager {\n\tscenes: Scene[];\n\tactiveScene: string | null;\n\n\tconstructor({ scenes }: { scenes: Scene[] | null }) {\n\t\tthis.scenes = scenes || [];\n\t\tthis.activeScene = (scenes && scenes[0].id) || null;\n\t}\n\n\tgetActiveScene(): Scene | null {\n\t\tconsole.log(\n\t\t\t'active scene find',\n\t\t\tthis.activeScene,\n\t\t\tthis.scenes,\n\t\t\tthis.scenes.find((scene) => scene.id == this.activeScene)\n\t\t);\n\t\treturn this.activeScene\n\t\t\t? this.scenes.find((scene) => scene.id == this.activeScene) || null\n\t\t\t: null;\n\t}\n\n\tsetActiveScene(id: string) {\n\t\tconsole.log('set active scene', this.activeScene, id);\n\t\tthis.activeScene = id;\n\t\tconsole.log('set active scene', this.activeScene, id);\n\t}\n\n\tgetScenes() {\n\t\treturn this.scenes;\n\t}\n\n\taddScene(scene: Scene) {\n\t\tthis.scenes.push(scene);\n\t}\n}\n\ninterface IContext {\n\tproductName: string;\n\tpreviewStatus: DiscordStatus | null;\n\tsetPreviewStatus: Dispatch<SetStateAction<DiscordStatus | null>>;\n\tsceneManager: SceneManager;\n}\n\nconst contextProps: IContext = {\n\tproductName: '',\n\tpreviewStatus: null,\n\tsetPreviewStatus: (null as unknown) as Dispatch<\n\t\tSetStateAction<DiscordStatus | null>\n\t>,\n\tsceneManager: new SceneManager({ scenes: null }),\n};\n\nconst EditorContext = createContext<IContext>(contextProps);\n\nexport default EditorContext;\nexport { Scene, SceneManager };\n"]},"metadata":{},"sourceType":"module"}