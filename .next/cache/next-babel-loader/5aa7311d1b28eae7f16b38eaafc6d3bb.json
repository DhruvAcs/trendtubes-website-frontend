{"ast":null,"code":"import _classCallCheck from \"/home/trevorb/Documents/VSCode Projects/statuscord/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/trevorb/Documents/VSCode Projects/statuscord/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _defineProperty from \"/home/trevorb/Documents/VSCode Projects/statuscord/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { createContext } from 'react'; // import { FilteredResultsAction } from '../reducers/FilteredResultsReducer';\n\nimport { Scene } from './scenemanager-reducer';\n\nvar SceneManager = /*#__PURE__*/function () {\n  function SceneManager(_ref) {\n    var scenes = _ref.scenes;\n\n    _classCallCheck(this, SceneManager);\n\n    _defineProperty(this, \"scenes\", void 0);\n\n    _defineProperty(this, \"activeScene\", void 0);\n\n    this.scenes = scenes || [];\n    this.activeScene = scenes && scenes[0].id || null;\n  }\n\n  _createClass(SceneManager, [{\n    key: \"getActiveScene\",\n    value: function getActiveScene() {\n      return this.activeScene;\n    }\n  }, {\n    key: \"findActiveScene\",\n    value: function findActiveScene() {\n      var _this = this;\n\n      console.log('active scene find', this.activeScene, this.scenes, this.scenes.find(function (scene) {\n        return scene.id == _this.activeScene;\n      }));\n      return this.activeScene ? this.scenes.find(function (scene) {\n        return scene.id == _this.activeScene;\n      }) || null : null;\n    }\n  }, {\n    key: \"setActiveScene\",\n    value: function setActiveScene(id, sceneDispatch) {\n      // this.activeScene = id;\n      // console.log('set active scene', this.activeScene, id);\n      this.activeScene = id;\n      sceneDispatch(id);\n      console.log(this.activeScene, this.getActiveScene()); // console.log(\n      // \t'set active scene',\n      // \tthis.getActiveScene(),\n      // \tthis.activeScene,\n      // \tid\n      // );\n    }\n  }, {\n    key: \"getScenes\",\n    value: function getScenes() {\n      return this.scenes;\n    }\n  }, {\n    key: \"addScene\",\n    value: function addScene(scene) {\n      this.scenes.push(scene);\n    }\n  }]);\n\n  return SceneManager;\n}();\n\nvar Product = /*#__PURE__*/function () {\n  function Product(_ref2) {\n    var id = _ref2.id,\n        name = _ref2.name,\n        createdAt = _ref2.createdAt,\n        updatedAt = _ref2.updatedAt,\n        author = _ref2.author,\n        price = _ref2.price,\n        variants = _ref2.variants;\n\n    _classCallCheck(this, Product);\n\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"name\", void 0);\n\n    _defineProperty(this, \"createdAt\", void 0);\n\n    _defineProperty(this, \"updatedAt\", void 0);\n\n    _defineProperty(this, \"author\", void 0);\n\n    _defineProperty(this, \"price\", void 0);\n\n    _defineProperty(this, \"variants\", void 0);\n\n    this.id = id;\n    this.name = name;\n    this.createdAt = createdAt;\n    this.updatedAt = updatedAt;\n    this.author = author;\n    this.price = price;\n    this.variants = variants;\n  }\n\n  _createClass(Product, [{\n    key: \"purchase\",\n    value: function purchase() {//IMPLEMENT LATER\n    }\n  }]);\n\n  return Product;\n}();\n\nvar contextProps = {\n  product: new Product({\n    id: '',\n    name: '',\n    createdAt: new Date(),\n    updatedAt: new Date(),\n    author: '',\n    price: 0,\n    variants: []\n  }),\n  previewStatus: null,\n  setPreviewStatus: null,\n  // sceneManager: new SceneManager({ scenes: null }),\n  // setSceneManager: (null as unknown) as Dispatch<SetStateAction<SceneManager>>,\n  sceneManager: {\n    activeScene: null,\n    scenes: []\n  },\n  dispatchSceneManager: null\n};\nvar EditorContext = /*#__PURE__*/createContext(contextProps);\nexport default EditorContext;\nexport { Scene, SceneManager, Product };","map":{"version":3,"sources":["/home/trevorb/Documents/VSCode Projects/statuscord/react/editor-context.ts"],"names":["createContext","Scene","SceneManager","scenes","activeScene","id","console","log","find","scene","sceneDispatch","getActiveScene","push","Product","name","createdAt","updatedAt","author","price","variants","contextProps","product","Date","previewStatus","setPreviewStatus","sceneManager","dispatchSceneManager","EditorContext"],"mappings":"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","sourcesContent":["import { SetStateAction } from 'react';\nimport { Dispatch } from 'react';\nimport { createContext } from 'react';\n// import { FilteredResultsAction } from '../reducers/FilteredResultsReducer';\nimport DiscordStatus from './discord-status';\nimport EditorInputType from './editor-input';\n// import { CartItem, CartItems, CartReducer } from \"../reducers/CartReducer\";\nimport { nanoid } from 'nanoid';\nimport { stringify } from 'querystring';\nimport { Scene, SceneManagerAction } from './scenemanager-reducer';\n\nclass SceneManager {\n\tscenes: Scene[];\n\tactiveScene: string | null;\n\n\tconstructor({ scenes }: { scenes: Scene[] | null }) {\n\t\tthis.scenes = scenes || [];\n\t\tthis.activeScene = (scenes && scenes[0].id) || null;\n\t}\n\n\tgetActiveScene() {\n\t\treturn this.activeScene;\n\t}\n\n\tfindActiveScene(): Scene | null {\n\t\tconsole.log(\n\t\t\t'active scene find',\n\t\t\tthis.activeScene,\n\t\t\tthis.scenes,\n\t\t\tthis.scenes.find((scene) => scene.id == this.activeScene)\n\t\t);\n\t\treturn this.activeScene\n\t\t\t? this.scenes.find((scene) => scene.id == this.activeScene) || null\n\t\t\t: null;\n\t}\n\n\tsetActiveScene(\n\t\tid: string,\n\t\tsceneDispatch: React.Dispatch<React.SetStateAction<string | null>>\n\t) {\n\t\t// this.activeScene = id;\n\n\t\t// console.log('set active scene', this.activeScene, id);\n\t\tthis.activeScene = id;\n\t\tsceneDispatch(id);\n\t\tconsole.log(this.activeScene, this.getActiveScene());\n\t\t// console.log(\n\t\t// \t'set active scene',\n\t\t// \tthis.getActiveScene(),\n\t\t// \tthis.activeScene,\n\t\t// \tid\n\t\t// );\n\t}\n\n\tgetScenes() {\n\t\treturn this.scenes;\n\t}\n\n\taddScene(scene: Scene) {\n\t\tthis.scenes.push(scene);\n\t}\n}\n\ninterface IProductProps {\n\tid: string;\n\tname: string;\n\tcreatedAt: Date;\n\tupdatedAt: Date;\n\tauthor: string;\n\tprice: number;\n\tvariants: {\n\t\tid: string;\n\t\tname: string;\n\t\tpreviewImage: String | Blob;\n\t\tsceneObject: JSX.Element | null;\n\t\teditorInputs: {\n\t\t\tkey: string;\n\t\t\thbsKey: string;\n\t\t\tinputProps?: {\n\t\t\t\tonKeyUp: string;\n\t\t\t};\n\t\t\tlabel: string;\n\t\t\ttype: EditorInputType;\n\t\t}[];\n\t}[];\n}\n\nclass Product {\n\tid: string;\n\tname: string;\n\tcreatedAt: Date;\n\tupdatedAt: Date;\n\tauthor: string;\n\tprice: number;\n\tvariants: {\n\t\tid: string;\n\t\tname: string;\n\t\tpreviewImage: String | Blob;\n\t\tsceneObject: JSX.Element | null;\n\t\teditorInputs: {\n\t\t\tkey: string;\n\t\t\thbsKey: string;\n\t\t\tlabel: string;\n\t\t\ttype: EditorInputType;\n\t\t}[];\n\t}[];\n\n\tconstructor({\n\t\tid,\n\t\tname,\n\t\tcreatedAt,\n\t\tupdatedAt,\n\t\tauthor,\n\t\tprice,\n\t\tvariants,\n\t}: IProductProps) {\n\t\tthis.id = id;\n\t\tthis.name = name;\n\t\tthis.createdAt = createdAt;\n\t\tthis.updatedAt = updatedAt;\n\t\tthis.author = author;\n\t\tthis.price = price;\n\t\tthis.variants = variants;\n\t}\n\n\tpurchase() {\n\t\t//IMPLEMENT LATER\n\t}\n}\n\ninterface IContext {\n\tproduct: Product;\n\tpreviewStatus: DiscordStatus | null;\n\tsetPreviewStatus: Dispatch<SetStateAction<DiscordStatus | null>>;\n\tsceneManager: { activeScene: Scene | any; scenes: Scene[] };\n\tdispatchSceneManager: React.Dispatch<SceneManagerAction>;\n\t// sceneManager: SceneManager;\n\t// setSceneManager: Dispatch<SetStateAction<SceneManager>>;\n}\n\nconst contextProps: IContext = {\n\tproduct: new Product({\n\t\tid: '',\n\t\tname: '',\n\t\tcreatedAt: new Date(),\n\t\tupdatedAt: new Date(),\n\t\tauthor: '',\n\t\tprice: 0,\n\t\tvariants: [],\n\t}),\n\tpreviewStatus: null,\n\tsetPreviewStatus: (null as unknown) as Dispatch<\n\t\tSetStateAction<DiscordStatus | null>\n\t>,\n\t// sceneManager: new SceneManager({ scenes: null }),\n\t// setSceneManager: (null as unknown) as Dispatch<SetStateAction<SceneManager>>,\n\tsceneManager: { activeScene: null, scenes: [] },\n\tdispatchSceneManager: (null as unknown) as React.Dispatch<SceneManagerAction>,\n};\n\nconst EditorContext = createContext<IContext>(contextProps);\n\nexport default EditorContext;\nexport { Scene, SceneManager, Product };\n"]},"metadata":{},"sourceType":"module"}