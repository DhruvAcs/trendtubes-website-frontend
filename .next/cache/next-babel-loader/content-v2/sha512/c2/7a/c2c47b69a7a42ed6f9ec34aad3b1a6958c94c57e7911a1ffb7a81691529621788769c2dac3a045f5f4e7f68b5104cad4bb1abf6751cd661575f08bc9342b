{"ast":null,"code":"import { faInstagram, faTiktok, faTwitch, faYoutube } from '@fortawesome/free-brands-svg-icons';\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\n\nconst capitalizeFirst = str => {\n  return str.charAt(0).toUpperCase() + str.toLowerCase().substr(1);\n};\n\nconst getPlatformIcon = platform => {\n  return platform.toUpperCase() == 'YOUTUBE' ? faYoutube : platform.toUpperCase() == 'INSTAGRAM' ? faInstagram : platform.toUpperCase() == 'TIKTOK' ? faTiktok : platform.toUpperCase() == 'TWITCH' ? faTwitch : faQuestionCircle;\n};\n\nconst isValidURL = str => {\n  var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + // protocol\n  '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n  '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n  '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n  '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n  '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n\n  return !!pattern.test(str);\n};\n\nfunction isValidEmail(email) {\n  const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(String(email).toLowerCase());\n}\n\nconst findSubPath = (base, path) => {\n  return base.subPaths.find(subPath => subPath.path.toLowerCase() == path.toLowerCase());\n};\n\nexport { capitalizeFirst, getPlatformIcon, isValidURL, isValidEmail, findSubPath };","map":{"version":3,"sources":["/home/trevorb/Documents/VSCode Projects/trendtubes/utils/general-utils.ts"],"names":["faInstagram","faTiktok","faTwitch","faYoutube","faQuestionCircle","capitalizeFirst","str","charAt","toUpperCase","toLowerCase","substr","getPlatformIcon","platform","isValidURL","pattern","RegExp","test","isValidEmail","email","re","String","findSubPath","base","path","subPaths","find","subPath"],"mappings":"AAAA,SACCA,WADD,EAECC,QAFD,EAGCC,QAHD,EAICC,SAJD,QAKO,oCALP;AAMA,SAASC,gBAAT,QAAiC,mCAAjC;;AAEA,MAAMC,eAAe,GAAIC,GAAD,IAAiB;AACxC,SAAOA,GAAG,CAACC,MAAJ,CAAW,CAAX,EAAcC,WAAd,KAA8BF,GAAG,CAACG,WAAJ,GAAkBC,MAAlB,CAAyB,CAAzB,CAArC;AACA,CAFD;;AAIA,MAAMC,eAAe,GAAIC,QAAD,IAAsB;AAC7C,SAAOA,QAAQ,CAACJ,WAAT,MAA0B,SAA1B,GACJL,SADI,GAEJS,QAAQ,CAACJ,WAAT,MAA0B,WAA1B,GACAR,WADA,GAEAY,QAAQ,CAACJ,WAAT,MAA0B,QAA1B,GACAP,QADA,GAEAW,QAAQ,CAACJ,WAAT,MAA0B,QAA1B,GACAN,QADA,GAEAE,gBARH;AASA,CAVD;;AAYA,MAAMS,UAAU,GAAIP,GAAD,IAAS;AAC3B,MAAIQ,OAAO,GAAG,IAAIC,MAAJ,CACb,sBAAsB;AACrB,oDADD,GACsD;AACrD,+BAFD,GAEiC;AAChC,mCAHD,GAGqC;AACpC,4BAJD,GAI8B;AAC7B,sBANY,EAOb,GAPa,CAAd,CAD2B,CASxB;;AACH,SAAO,CAAC,CAACD,OAAO,CAACE,IAAR,CAAaV,GAAb,CAAT;AACA,CAXD;;AAaA,SAASW,YAAT,CAAsBC,KAAtB,EAA6B;AAC5B,QAAMC,EAAE,GAAG,uJAAX;AACA,SAAOA,EAAE,CAACH,IAAH,CAAQI,MAAM,CAACF,KAAD,CAAN,CAAcT,WAAd,EAAR,CAAP;AACA;;AAED,MAAMY,WAAW,GAAG,CAACC,IAAD,EAAOC,IAAP,KAAgB;AACnC,SAAOD,IAAI,CAACE,QAAL,CAAcC,IAAd,CACLC,OAAD,IAAaA,OAAO,CAACH,IAAR,CAAad,WAAb,MAA8Bc,IAAI,CAACd,WAAL,EADrC,CAAP;AAGA,CAJD;;AAMA,SACCJ,eADD,EAECM,eAFD,EAGCE,UAHD,EAICI,YAJD,EAKCI,WALD","sourcesContent":["import {\n\tfaInstagram,\n\tfaTiktok,\n\tfaTwitch,\n\tfaYoutube,\n} from '@fortawesome/free-brands-svg-icons';\nimport { faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\n\nconst capitalizeFirst = (str: string) => {\n\treturn str.charAt(0).toUpperCase() + str.toLowerCase().substr(1);\n};\n\nconst getPlatformIcon = (platform: string) => {\n\treturn platform.toUpperCase() == 'YOUTUBE'\n\t\t? faYoutube\n\t\t: platform.toUpperCase() == 'INSTAGRAM'\n\t\t? faInstagram\n\t\t: platform.toUpperCase() == 'TIKTOK'\n\t\t? faTiktok\n\t\t: platform.toUpperCase() == 'TWITCH'\n\t\t? faTwitch\n\t\t: faQuestionCircle;\n};\n\nconst isValidURL = (str) => {\n\tvar pattern = new RegExp(\n\t\t'^(https?:\\\\/\\\\/)?' + // protocol\n\t\t\t'((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\n\t\t\t'((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\n\t\t\t'(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\n\t\t\t'(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\n\t\t\t'(\\\\#[-a-z\\\\d_]*)?$',\n\t\t'i'\n\t); // fragment locator\n\treturn !!pattern.test(str);\n};\n\nfunction isValidEmail(email) {\n\tconst re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\treturn re.test(String(email).toLowerCase());\n}\n\nconst findSubPath = (base, path) => {\n\treturn base.subPaths.find(\n\t\t(subPath) => subPath.path.toLowerCase() == path.toLowerCase()\n\t);\n};\n\nexport {\n\tcapitalizeFirst,\n\tgetPlatformIcon,\n\tisValidURL,\n\tisValidEmail,\n\tfindSubPath,\n};\n"]},"metadata":{},"sourceType":"module"}