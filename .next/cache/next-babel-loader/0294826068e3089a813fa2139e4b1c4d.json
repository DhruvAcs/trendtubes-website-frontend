{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useContext } from 'react';\nimport { DOWNLOAD_LIST_LIMIT } from '../../utils/limits-util';\nimport AppContext from '../contexts/AppContext';\nimport { v4 as uuidv4 } from 'uuid';\nexport class Scene {\n  constructor({\n    display,\n    previewImage,\n    sceneObject,\n    editorInputs\n  }) {\n    _defineProperty(this, \"id\", void 0);\n\n    _defineProperty(this, \"display\", void 0);\n\n    _defineProperty(this, \"previewImage\", void 0);\n\n    _defineProperty(this, \"sceneObject\", void 0);\n\n    _defineProperty(this, \"editorInputs\", void 0);\n\n    // this.id = nanoid(12);\n    this.id = uuidv4();\n    this.display = display;\n    this.previewImage = previewImage;\n    this.sceneObject = sceneObject;\n    this.editorInputs = editorInputs;\n  } // isActiveScene(sceneManager: SceneManager) {\n  // \tthis.id == sceneManager.activeScene;\n  // }\n\n\n}\n\nconst SceneManagerReducer = (state, action) => {\n  const appContext = useContext(AppContext);\n\n  switch (action.type.toUpperCase()) {\n    case 'ADD':\n      if (state.length >= DOWNLOAD_LIST_LIMIT) {\n        console.log('app context', appContext);\n        return {\n          activeScene: state.activeScene,\n          scenes: [...state.scenes, action.payload]\n        };\n      }\n\n      console.log('ADDING TO LIST', action.payload);\n      return [...state, action.payload];\n\n    case 'REMOVE':\n      console.log('REMOVING FROM LIST', action.payload);\n      return [...state].filter(listItem => listItem.id != action.payload.id);\n\n    case 'CLEAR':\n      console.log('CLEARING LIST', action.payload);\n      return [];\n\n    case 'SET':\n      console.log('SETTING LIST', action.payload);\n      return [...action.payload];\n\n    default:\n      return [...state];\n  }\n};\n\nexport { SceneManagerReducer };","map":{"version":3,"sources":["/home/trevorb/Documents/VSCode Projects/statuscord/react/scenemanager-reducer.ts"],"names":["useContext","DOWNLOAD_LIST_LIMIT","AppContext","v4","uuidv4","Scene","constructor","display","previewImage","sceneObject","editorInputs","id","SceneManagerReducer","state","action","appContext","type","toUpperCase","length","console","log","activeScene","scenes","payload","filter","listItem"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,SAASC,mBAAT,QAAoC,yBAApC;AACA,OAAOC,UAAP,MAAuB,wBAAvB;AAEA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AAaA,OAAO,MAAMC,KAAN,CAAY;AAUlBC,EAAAA,WAAW,CAAC;AACXC,IAAAA,OADW;AAEXC,IAAAA,YAFW;AAGXC,IAAAA,WAHW;AAIXC,IAAAA;AAJW,GAAD,EAKI;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACd;AACA,SAAKC,EAAL,GAAUP,MAAM,EAAhB;AACA,SAAKG,OAAL,GAAeA,OAAf;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACA,SAAKC,YAAL,GAAoBA,YAApB;AACA,GAtBiB,CAwBlB;AACA;AACA;;;AA1BkB;;AAyCnB,MAAME,mBAAmB,GAAG,CAC3BC,KAD2B,EAE3BC,MAF2B,KAGvB;AACJ,QAAMC,UAAU,GAAGf,UAAU,CAACE,UAAD,CAA7B;;AAEA,UAAQY,MAAM,CAACE,IAAP,CAAYC,WAAZ,EAAR;AACC,SAAK,KAAL;AACC,UAAIJ,KAAK,CAACK,MAAN,IAAgBjB,mBAApB,EAAyC;AACxCkB,QAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BL,UAA3B;AAEA,eAAO;AACNM,UAAAA,WAAW,EAAER,KAAK,CAACQ,WADb;AAENC,UAAAA,MAAM,EAAE,CAAC,GAAGT,KAAK,CAACS,MAAV,EAAkBR,MAAM,CAACS,OAAzB;AAFF,SAAP;AAIA;;AAEDJ,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BN,MAAM,CAACS,OAArC;AAEA,aAAO,CAAC,GAAGV,KAAJ,EAAWC,MAAM,CAACS,OAAlB,CAAP;;AACD,SAAK,QAAL;AACCJ,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCN,MAAM,CAACS,OAAzC;AAEA,aAAO,CAAC,GAAGV,KAAJ,EAAWW,MAAX,CAAmBC,QAAD,IAAcA,QAAQ,CAACd,EAAT,IAAeG,MAAM,CAACS,OAAP,CAAeZ,EAA9D,CAAP;;AACD,SAAK,OAAL;AACCQ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BN,MAAM,CAACS,OAApC;AAEA,aAAO,EAAP;;AACD,SAAK,KAAL;AACCJ,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BN,MAAM,CAACS,OAAnC;AACA,aAAO,CAAC,GAAGT,MAAM,CAACS,OAAX,CAAP;;AACD;AACC,aAAO,CAAC,GAAGV,KAAJ,CAAP;AA1BF;AA4BA,CAlCD;;AAqCA,SAASD,mBAAT","sourcesContent":["import { useContext } from 'react';\nimport ResourceDataInterface from '../../interfaces/ResourceDataInterface';\nimport { DOWNLOAD_LIST_LIMIT } from '../../utils/limits-util';\nimport AppContext from '../contexts/AppContext';\nimport { EditorInputType } from './editor-input';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface SceneProps {\n\t// id: string;\n\tdisplay: string;\n\tpreviewImage: String | Blob;\n\tsceneObject: JSX.Element | null;\n\teditorInputs: {\n\t\tkey: { internal: string; display: string };\n\t\ttype: EditorInputType;\n\t}[];\n}\n\nexport class Scene {\n\tid: string;\n\tdisplay: string;\n\tpreviewImage: String | Blob;\n\tsceneObject: JSX.Element | null;\n\teditorInputs: {\n\t\tkey: { internal: string; display: string };\n\t\ttype: EditorInputType;\n\t}[];\n\n\tconstructor({\n\t\tdisplay,\n\t\tpreviewImage,\n\t\tsceneObject,\n\t\teditorInputs,\n\t}: SceneProps) {\n\t\t// this.id = nanoid(12);\n\t\tthis.id = uuidv4();\n\t\tthis.display = display;\n\t\tthis.previewImage = previewImage;\n\t\tthis.sceneObject = sceneObject;\n\t\tthis.editorInputs = editorInputs;\n\t}\n\n\t// isActiveScene(sceneManager: SceneManager) {\n\t// \tthis.id == sceneManager.activeScene;\n\t// }\n}\n\ntype SceneManagerAction =\n\t| {\n\t\t\ttype: 'ADD';\n\t\t\tpayload: Scene;\n\t  }\n\t| { type: 'REMOVE'; payload: Scene | string }\n\t| { type: 'CLEAR'; payload: undefined }\n\t| { type: 'GET_ALL'; payload: undefined }\n\t| { type: 'GET_ACTIVE'; payload: undefined }\n\t| { type: 'SET'; payload: Scene }\n\t| { type: 'SET_ACTIVE'; payload: Scene | string };\n\nconst SceneManagerReducer = (\n\tstate: { activeScene: Scene; scenes: Scene[] },\n\taction: SceneManagerAction\n) => {\n\tconst appContext = useContext(AppContext);\n\n\tswitch (action.type.toUpperCase()) {\n\t\tcase 'ADD':\n\t\t\tif (state.length >= DOWNLOAD_LIST_LIMIT) {\n\t\t\t\tconsole.log('app context', appContext);\n\n\t\t\t\treturn {\n\t\t\t\t\tactiveScene: state.activeScene,\n\t\t\t\t\tscenes: [...state.scenes, action.payload],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tconsole.log('ADDING TO LIST', action.payload);\n\n\t\t\treturn [...state, action.payload];\n\t\tcase 'REMOVE':\n\t\t\tconsole.log('REMOVING FROM LIST', action.payload);\n\n\t\t\treturn [...state].filter((listItem) => listItem.id != action.payload.id);\n\t\tcase 'CLEAR':\n\t\t\tconsole.log('CLEARING LIST', action.payload);\n\n\t\t\treturn [];\n\t\tcase 'SET':\n\t\t\tconsole.log('SETTING LIST', action.payload);\n\t\t\treturn [...action.payload];\n\t\tdefault:\n\t\t\treturn [...state];\n\t}\n};\n\nexport type { SceneManagerAction };\nexport { SceneManagerReducer };\n"]},"metadata":{},"sourceType":"module"}