{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$();\n\nimport { useAsync } from 'react-async';\nimport { BackendApi } from '../../../utils/backend-api';\n\nvar fetchAccount = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {\n    var id, accountResponse;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            id = _ref.id;\n            console.log(';accountproidata 2', id);\n            _context.next = 4;\n            return BackendApi.getAccount(id);\n\n          case 4:\n            accountResponse = _context.sent;\n\n            if (!(!accountResponse || !accountResponse.data)) {\n              _context.next = 7;\n              break;\n            }\n\n            throw new Error();\n\n          case 7:\n            return _context.abrupt(\"return\", accountResponse.data);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetchAccount(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar AccountProductData = function AccountProductData(_ref3) {\n  _s();\n\n  var children = _ref3.children,\n      id = _ref3.id;\n  console.log(';accountproidata 1', id);\n  var state = useAsync({\n    promiseFn: fetchAccount,\n    id: id\n  });\n  return children(state);\n};\n\n_s(AccountProductData, \"6DkgpyWhYa1teswdqaBZnrRVXEQ=\", false, function () {\n  return [useAsync];\n});\n\n_c = AccountProductData;\nexport { AccountProductData };\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountProductData\");","map":{"version":3,"sources":["/home/trevorb/Documents/VSCode Projects/trendtubes-new/trendtubes/components/dashboard/accounts/dashboard-account-data.ts"],"names":["useAsync","BackendApi","fetchAccount","id","console","log","getAccount","accountResponse","data","Error","AccountProductData","children","state","promiseFn"],"mappings":";;;;;AAAA,SAAoBA,QAApB,QAAoC,aAApC;AACA,SAASC,UAAT,QAA2B,4BAA3B;;AAEA,IAAMC,YAA4B;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAASC,YAAAA,EAAT,QAASA,EAAT;AACpCC,YAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,EAAlC;AADoC;AAAA,mBAENF,UAAU,CAACK,UAAX,CAAsBH,EAAtB,CAFM;;AAAA;AAE9BI,YAAAA,eAF8B;;AAAA,kBAGhC,CAACA,eAAD,IAAoB,CAACA,eAAe,CAACC,IAHL;AAAA;AAAA;AAAA;;AAAA,kBAGiB,IAAIC,KAAJ,EAHjB;;AAAA;AAAA,6CAI7BF,eAAe,CAACC,IAJa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAA5BN,YAA4B;AAAA;AAAA;AAAA,GAAlC;;AAOA,IAAMQ,kBAAkB,GAAG,SAArBA,kBAAqB,QAAsB;AAAA;;AAAA,MAAnBC,QAAmB,SAAnBA,QAAmB;AAAA,MAATR,EAAS,SAATA,EAAS;AAChDC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCF,EAAlC;AACA,MAAMS,KAAK,GAAGZ,QAAQ,CAAC;AAAEa,IAAAA,SAAS,EAAEX,YAAb;AAA2BC,IAAAA,EAAE,EAAFA;AAA3B,GAAD,CAAtB;AACA,SAAOQ,QAAQ,CAACC,KAAD,CAAf;AACA,CAJD;;GAAMF,kB;UAESV,Q;;;KAFTU,kB;AAMN,SAASA,kBAAT","sourcesContent":["import { PromiseFn, useAsync } from 'react-async';\nimport { BackendApi } from '../../../utils/backend-api';\n\nconst fetchAccount: PromiseFn<any> = async ({ id }) => {\n\tconsole.log(';accountproidata 2', id);\n\tconst accountResponse = await BackendApi.getAccount(id);\n\tif (!accountResponse || !accountResponse.data) throw new Error();\n\treturn accountResponse.data;\n};\n\nconst AccountProductData = ({ children, id }) => {\n\tconsole.log(';accountproidata 1', id);\n\tconst state = useAsync({ promiseFn: fetchAccount, id });\n\treturn children(state);\n};\n\nexport { AccountProductData };\n"]},"metadata":{},"sourceType":"module"}